"""Audit template management for compliance reporting."""

from dataclasses import dataclass
from typing import Dict, List, Optional
from pathlib import Path
import yaml


@dataclass
class AuditTemplate:
    """Template for audit documentation and reporting."""
    
    name: str
    framework: str
    description: str
    sections: List[str]
    required_evidence: List[str]
    template_path: Optional[Path] = None
    
    @classmethod
    def load_template(cls, template_path: Path) -> 'AuditTemplate':
        """Load audit template from file."""
        with open(template_path, 'r') as f:
            data = yaml.safe_load(f)
        
        return cls(
            name=data['name'],
            framework=data['framework'],
            description=data['description'],
            sections=data['sections'],
            required_evidence=data['required_evidence'],
            template_path=template_path
        )
    
    def generate_template(self, output_path: Path) -> None:
        """Generate audit template document."""
        template_content = f"""# {self.name}

## Framework: {self.framework}

### Description
{self.description}

## Required Sections

"""
        
        for section in self.sections:
            template_content += f"### {section}\n\n[Content to be provided]\n\n"
        
        template_content += """## Evidence Requirements

"""
        
        for evidence in self.required_evidence:
            template_content += f"- [ ] {evidence}\n"
        
        template_content += f"""

## Audit Trail

**Template Generated:** {Path(__file__).name}  
**Date:** [Date]  
**Auditor:** [Auditor Name]  
**Organization:** [Organization Name]

---

*Generated by AuditHound Compliance Platform*
"""
        
        with open(output_path, 'w') as f:
            f.write(template_content)


# Pre-defined audit templates
SOC2_TEMPLATE = AuditTemplate(
    name="SOC 2 Type II Audit Template",
    framework="SOC 2",
    description="Comprehensive audit template for SOC 2 Type II compliance assessment",
    sections=[
        "Executive Summary",
        "Audit Scope and Objectives", 
        "System Description",
        "Control Environment",
        "Risk Assessment",
        "Control Activities",
        "Information and Communication",
        "Monitoring Activities",
        "Findings and Recommendations",
        "Management Response",
        "Appendices"
    ],
    required_evidence=[
        "System architecture diagrams",
        "Data flow documentation",
        "Access control matrices",
        "Security policies and procedures",
        "Incident response documentation",
        "Vulnerability scan results",
        "Code review findings",
        "Third-party security assessments",
        "Backup and recovery procedures",
        "Change management documentation"
    ]
)

NIST_TEMPLATE = AuditTemplate(
    name="NIST Cybersecurity Framework Assessment Template",
    framework="NIST CSF",
    description="Template for NIST Cybersecurity Framework assessment and gap analysis",
    sections=[
        "Executive Summary",
        "Assessment Methodology",
        "Current State Analysis",
        "Target State Definition",
        "Gap Analysis",
        "Implementation Roadmap",
        "Risk Assessment",
        "Resource Requirements",
        "Success Metrics",
        "Recommendations"
    ],
    required_evidence=[
        "Asset inventory documentation",
        "Risk assessment reports",
        "Security control documentation",
        "Incident response procedures",
        "Business continuity plans",
        "Vendor security assessments",
        "Security awareness training records",
        "Penetration testing results",
        "Vulnerability management documentation",
        "Security monitoring logs"
    ]
)

CIS_TEMPLATE = AuditTemplate(
    name="CIS Critical Security Controls Assessment Template", 
    framework="CIS Controls",
    description="Template for CIS Critical Security Controls implementation assessment",
    sections=[
        "Executive Summary",
        "Implementation Group Assessment",
        "Basic Controls Analysis",
        "Foundational Controls Analysis", 
        "Organizational Controls Analysis",
        "Maturity Assessment",
        "Gap Analysis",
        "Priority Recommendations",
        "Implementation Timeline",
        "Resource Planning"
    ],
    required_evidence=[
        "Hardware asset inventory",
        "Software asset inventory",
        "Configuration management documentation",
        "Vulnerability assessment results",
        "Administrative privilege documentation",
        "Log management procedures",
        "Email and web browser protections",
        "Malware defense documentation",
        "Data recovery capabilities",
        "Security skills assessment"
    ]
)

OWASP_TEMPLATE = AuditTemplate(
    name="OWASP ASVS Assessment Template",
    framework="OWASP ASVS",
    description="Template for OWASP Application Security Verification Standard assessment",
    sections=[
        "Executive Summary",
        "Application Security Architecture",
        "Authentication Verification",
        "Session Management Verification", 
        "Access Control Verification",
        "Validation, Sanitization and Encoding",
        "Stored Cryptography Verification",
        "Error Handling and Logging",
        "Data Protection Verification",
        "Communications Verification",
        "Malicious Code Verification",
        "Business Logic Verification",
        "File and Resources Verification",
        "API and Web Service Verification",
        "Configuration Verification"
    ],
    required_evidence=[
        "Application architecture documentation",
        "Authentication mechanism analysis",
        "Session management implementation",
        "Access control matrix",
        "Input validation procedures",
        "Cryptographic implementation review",
        "Error handling analysis",
        "Logging and monitoring setup",
        "Data classification documentation",
        "API security assessment",
        "Configuration review results",
        "Code review findings",
        "Penetration testing results",
        "Security testing procedures"
    ]
)


def get_template_by_framework(framework: str) -> Optional[AuditTemplate]:
    """Get audit template by framework name."""
    templates = {
        'soc2': SOC2_TEMPLATE,
        'nist': NIST_TEMPLATE, 
        'cis': CIS_TEMPLATE,
        'owasp': OWASP_TEMPLATE
    }
    
    return templates.get(framework.lower())


def list_available_templates() -> List[AuditTemplate]:
    """List all available audit templates."""
    return [SOC2_TEMPLATE, NIST_TEMPLATE, CIS_TEMPLATE, OWASP_TEMPLATE]